/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "sysmon_header.h"
#include "sysmonpsu_header.h"
#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "xgpio.h"
#include "xgpiops.h"
#include "scugic_header.h"
#include "xscugic.h"
#include "xsysmonpsu.h"
#include "xsysmon.h"
#include "gpio_header.h"
#include "system_test.h"
#include "xtime_l.h"
#include "uart_header.h"
#include "pmodtmp2.h"
#include <stdlib.h>
#include "sleep.h"
#include <stdlib.h>
#include "xuartps.h"
//#define RUN_SUBMODULES


//#define CHANNEL_GPIO_IN_LOAD_OUT 	1
#define STATUS_POLLING_PAUSED 		0x02
#define STATUS_POLLING_CONTINUED 	0x03


//Helper functions
void controlPolling();
int runMeasurement(double* measurement_buffer);

//Initialize global control variables
int button2_on;
int psu_rem_temp_max;
int psu_rem_temp_max_changed;


#ifndef RUN_SUBMODULES
int setup() {
	XTime_StartTimer();
	//Setup UART Interrupt
	//
	int status = UartPsIntrInitialize(&InterruptController, &UartPs,
			UART_DEVICE_ID, UART_INT_IRQ_ID);
	if (status != XST_SUCCESS) {
		return XST_FAILURE;
	}
	return 1;
	}

int main()
{
    init_platform();
    int c=setup();
    //Initialize global variables
	button2_on = 0;
	psu_rem_temp_max = 0;
	{
		controlPolling();
	}
    cleanup_platform();
    return 0;
}
#endif

void controlPolling()
{

for(int j=684;j<=689;j++)
{
	char *x = NULL;
	double *measurement_buffer;
	measurement_buffer = (double *) calloc(20000, sizeof(double));
	asiprintf(&x,"Message_%d \n",j);
	int s = strlen(x);
	sendUart(&UartPs, x, s);
		int amount_meas_datapoints = runMeasurement(measurement_buffer);
		for(int i=0; i<amount_meas_datapoints; i++)
			{
			char * msg = NULL;
			asiprintf(&msg," %0d.%03d, %i, \n",(int)(measurement_buffer[i]),SysMonPsuFractionToInt(measurement_buffer[i]), i);
			int size_local = strlen(msg);
			sendUart(&UartPs, msg, size_local);
			free(msg);
			usleep(400);
			 }
		free(measurement_buffer);
		free(x);
}
char *msg = NULL;
asiprintf(&msg,"Message_%d \n",1000);
int s = strlen(msg);
	sendUart(&UartPs,msg, s);
	free(msg);
}

int runMeasurement(double* measurement_buffer) {
	XTime time = 0;
	float value = 0;
	int buffer_index = 0;
	for(long i=0;i<20000;i++)
		{ usleep(1000);
		SysMonPsuReadCurrentTempRem(XPAR_PSU_AMS_DEVICE_ID, &value,&time);
		measurement_buffer[buffer_index++] = (double)value;}
	return buffer_index;
}
