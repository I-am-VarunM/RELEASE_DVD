/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "sysmon_header.h"
#include "sysmonpsu_header.h"
#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "xgpio.h"
#include "xgpiops.h"
#include "scugic_header.h"
#include "xscugic.h"
#include "xsysmonpsu.h"
#include "xsysmon.h"
#include "gpio_header.h"
#include "system_test.h"
#include "xtime_l.h"
#include "uart_header.h"
#include "pmodtmp2.h"
#include <stdlib.h>
#include "sleep.h"
#include "feature_extraction.h"
#include "mlmodel.h"
#include <stdlib.h>

//#define RUN_SUBMODULES

//Set global constants
#define CHANNEL_LED 				1
#define CHANNEL_PUSH 				2
#define CHANNEL_DIP 				1
#define CHANNEL_LOAD_IP_CORE_EN 	2
//#define CHANNEL_GPIO_IN_LOAD_OUT 	1
#define CHANNEL_GPIO_OUT_LOAD_EN 	2
#define CHANNEL_GPIO_OUT_DUTY_CYCLE 1
#define BTN_MEAS_PAUSE				0x04
#define BTN_MEAS_STOP				0x08
#define LED_MEAS_PAUSED				0x04
#define LED_MEAS_STOPPED			0x08
#define LED_LOAD_STARTED			0x01
#define LED_CHIP_TAMPERED			0x02
#define MEASUREMENT_BUFFER_SIZE		2000

#define STATUS_LOAD_ON 				0x00
#define STATUS_LOAD_OFF 			0x01
#define STATUS_POLLING_PAUSED 		0x02
#define STATUS_POLLING_CONTINUED 	0x03
#define STATUS_DUTY_CYCLE 			0x04
#define STATUS_CHIP_TAMPERED		0x05
#define STATUS_CHIP_UNTAMPERED		0x06

#define MEASUREMENT_TYPE_AMBIENT_TEMP 	0x00
#define MEASUREMENT_TYPE_PSU_TEMP 		0x01
#define MEASUREMENT_TYPE_PSU_REM_TEMP 	0x02
#define MEASUREMENT_TYPE_PL_TEMP 		0x03
#define MEASUREMENT_TYPE_PSU_VCCINT		0x04
#define MEASUREMENT_TYPE_PSU_VCCAUX 	0x05
#define MEASUREMENT_TYPE_PL_VCCINT 		0x06
#define MEASUREMENT_TYPE_PL_VCCAUX 		0x07

#define AMOUNT_OF_COARSE_MODULES 0
#define AMOUNT_OF_FINE_MODULES 32
#define COARSE_MODULES_BIT_MASK (0xFFFFFFFF >> (32-AMOUNT_OF_COARSE_MODULES))
#define FINE_MODULES_BIT_MASK (0xFFFFFFFF >> (32-AMOUNT_OF_FINE_MODULES))
#define NEW_DUTY_CYCLE_ENABLE_BIT 0x100
#define WAIT_TILL_STARTING_LOAD_TIME_INTERVAL_SEC 10
#define WAIT_TILL_STOPPING_LOAD_TIME_INTERVAL_SEC 30
#define WAIT_TILL_ENDING_MEAS_TIME_INTERVAL_SEC  10
#define WAIT_TILL_STARTING_LOAD_TIME_INTERVAL_MS 1000
#define WAIT_TILL_STOPPING_LOAD_TIME_INTERVAL_MS 3000
#define WAIT_TILL_ENDING_MEAS_TIME_INTERVAL_MS  1000
#define TOTAL_MEAS_TIME_INTERVAL_SEC  (WAIT_TILL_STARTING_LOAD_TIME_INTERVAL_SEC + WAIT_TILL_STOPPING_LOAD_TIME_INTERVAL_SEC + WAIT_TILL_ENDING_MEAS_TIME_INTERVAL_SEC)
#define TOTAL_MEAS_TIME_INTERVAL_MS  (WAIT_TILL_STARTING_LOAD_TIME_INTERVAL_MS + WAIT_TILL_STOPPING_LOAD_TIME_INTERVAL_MS + WAIT_TILL_ENDING_MEAS_TIME_INTERVAL_MS)
//#define TOTAL_MEAS_TIME_INTERVAL_MS 1000

#define SEC_TO_TIMESTAMP_FACTOR  100000000 // 100000000 = 1 sec
#define MS_TO_TIMESTAMP_FACTOR  100000 // 100000000 = 1 sec
#define MEASUREMENT_OFFSET 1000
#define MEASUREMENT_TIME_OFFSET_MS (0)

#define WELCH_COEFF 2


//Helper functions
void controlPolling();
int runMeasurement(double* measurement_buffer);

//Initialize global control variables
int button2_on;
int psu_rem_temp_max;
int psu_rem_temp_max_changed;


#ifndef RUN_SUBMODULES


int main()
{
    init_platform();

    //Initialize global variables
	button2_on = 0;
	psu_rem_temp_max = 0;

	print("Start");


    //========================================================//
	print("Start System Monitor Readout of Vcc and Temp. Interrupt with any pushbutton...\r\n");


	//System Monitor Readout. Interrupt with pushbutton
	while(button2_on == 0){
		controlPolling();
		sleep(2);
		printf("****************\n");
		sleep(0.5);
	}
    cleanup_platform();
    return 0;
}
#endif

void sendStatusMsgViaUart(int status, int value)
{
	XTime * Xtime = 0;
	char * msg = NULL;
	XTime_GetTime(Xtime);
	printf("Uart msg status %i\n", status);
	switch(status){
		case STATUS_POLLING_CONTINUED:
			asiprintf(&msg,"Polling continued (time: %lu).\n",(*Xtime));
			printf("Polling continued (time: %lu). \n", (*Xtime));
			break;
		case STATUS_POLLING_PAUSED:
			asiprintf(&msg,"Polling paused (time: %lu).\n",(*Xtime));
			printf("Polling continued (time: %lu). \n", (*Xtime));
			break;
		default:
			asiprintf(&msg,"No status change\n");
	}
	int size_local = strlen(msg);
	//sendUart(&UartPs, msg, size_local);
	free(msg);
}

void controlPolling()
{
	if(1){
		sendStatusMsgViaUart(STATUS_POLLING_CONTINUED,0);
		sleep(0.5);

		double *measurement_buffer;
		measurement_buffer = (double *) calloc(MEASUREMENT_BUFFER_SIZE, sizeof(double));



		int amount_meas_datapoints = runMeasurement(measurement_buffer); // incase anyone wants to use measured points
		for(int i=0; i<amount_meas_datapoints; i++)
			{printf("value %f, index %i, ",measurement_buffer[i], i);
			//if(i%10 == 0 && i!=0)
				//printf("\n");
			/*char *msg = NULL;
			asiprintf(&msg,"value %f, index %i\n",measurement_buffer[i], i);
			int size_local = strlen(msg);
			sendUart(&UartPs, msg, size_local);
			free(msg); */
			 }
	}
}

int runMeasurement(double* measurement_buffer) {
	XTime* Xtime = 0;
	XTime time = 0;
	float value = 0;
	XTime_GetTime(Xtime);
	int starting_time = *Xtime / MS_TO_TIMESTAMP_FACTOR;
	int current_time = starting_time;
	int end_time = TOTAL_MEAS_TIME_INTERVAL_MS + starting_time;
	int buffer_index = 0;
	int last_measurement_time = 0;
	printf("start time %i, end time %i\n", starting_time, end_time);
	while (current_time < end_time) {
		//if(current_time > last_measurement_time){
		sleep(0.1);
				SysMonPsuReadCurrentTempRem(XPAR_PSU_AMS_DEVICE_ID, &value,
						&time);
				measurement_buffer[buffer_index] = (double)value;
				buffer_index++;
		//}
		XTime_GetTime(Xtime);
		current_time = *Xtime / MS_TO_TIMESTAMP_FACTOR;
	}
	XTime_GetTime(Xtime);
	current_time = *Xtime / MS_TO_TIMESTAMP_FACTOR;
	printf("Measurement finished in %i ms\n", (current_time - starting_time));
	return buffer_index;
}

